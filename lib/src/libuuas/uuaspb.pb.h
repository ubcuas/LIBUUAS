// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uuaspb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_uuaspb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_uuaspb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_uuaspb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_uuaspb_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_uuaspb_2eproto;
namespace uuaspb {
class GeoTagRequest;
class GeoTagRequestDefaultTypeInternal;
extern GeoTagRequestDefaultTypeInternal _GeoTagRequest_default_instance_;
class GeoTagResponse;
class GeoTagResponseDefaultTypeInternal;
extern GeoTagResponseDefaultTypeInternal _GeoTagResponse_default_instance_;
class Telemetry;
class TelemetryDefaultTypeInternal;
extern TelemetryDefaultTypeInternal _Telemetry_default_instance_;
class UnGeoTagRequest;
class UnGeoTagRequestDefaultTypeInternal;
extern UnGeoTagRequestDefaultTypeInternal _UnGeoTagRequest_default_instance_;
class UnGeoTagResponse;
class UnGeoTagResponseDefaultTypeInternal;
extern UnGeoTagResponseDefaultTypeInternal _UnGeoTagResponse_default_instance_;
}  // namespace uuaspb
PROTOBUF_NAMESPACE_OPEN
template<> ::uuaspb::GeoTagRequest* Arena::CreateMaybeMessage<::uuaspb::GeoTagRequest>(Arena*);
template<> ::uuaspb::GeoTagResponse* Arena::CreateMaybeMessage<::uuaspb::GeoTagResponse>(Arena*);
template<> ::uuaspb::Telemetry* Arena::CreateMaybeMessage<::uuaspb::Telemetry>(Arena*);
template<> ::uuaspb::UnGeoTagRequest* Arena::CreateMaybeMessage<::uuaspb::UnGeoTagRequest>(Arena*);
template<> ::uuaspb::UnGeoTagResponse* Arena::CreateMaybeMessage<::uuaspb::UnGeoTagResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace uuaspb {

enum ResultStatus : int {
  OK = 0,
  ERR = 1,
  ResultStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResultStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResultStatus_IsValid(int value);
constexpr ResultStatus ResultStatus_MIN = OK;
constexpr ResultStatus ResultStatus_MAX = ERR;
constexpr int ResultStatus_ARRAYSIZE = ResultStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResultStatus_descriptor();
template<typename T>
inline const std::string& ResultStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResultStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResultStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResultStatus_descriptor(), enum_t_value);
}
inline bool ResultStatus_Parse(
    const std::string& name, ResultStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResultStatus>(
    ResultStatus_descriptor(), name, value);
}
// ===================================================================

class GeoTagRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uuaspb.GeoTagRequest) */ {
 public:
  inline GeoTagRequest() : GeoTagRequest(nullptr) {};
  virtual ~GeoTagRequest();

  GeoTagRequest(const GeoTagRequest& from);
  GeoTagRequest(GeoTagRequest&& from) noexcept
    : GeoTagRequest() {
    *this = ::std::move(from);
  }

  inline GeoTagRequest& operator=(const GeoTagRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoTagRequest& operator=(GeoTagRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeoTagRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoTagRequest* internal_default_instance() {
    return reinterpret_cast<const GeoTagRequest*>(
               &_GeoTagRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GeoTagRequest& a, GeoTagRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GeoTagRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeoTagRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeoTagRequest* New() const final {
    return CreateMaybeMessage<GeoTagRequest>(nullptr);
  }

  GeoTagRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeoTagRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeoTagRequest& from);
  void MergeFrom(const GeoTagRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoTagRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uuaspb.GeoTagRequest";
  }
  protected:
  explicit GeoTagRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_uuaspb_2eproto);
    return ::descriptor_table_uuaspb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kTelemetryFieldNumber = 2,
  };
  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_filename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_filename(
      std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // .uuaspb.Telemetry telemetry = 2;
  bool has_telemetry() const;
  private:
  bool _internal_has_telemetry() const;
  public:
  void clear_telemetry();
  const ::uuaspb::Telemetry& telemetry() const;
  ::uuaspb::Telemetry* release_telemetry();
  ::uuaspb::Telemetry* mutable_telemetry();
  void set_allocated_telemetry(::uuaspb::Telemetry* telemetry);
  private:
  const ::uuaspb::Telemetry& _internal_telemetry() const;
  ::uuaspb::Telemetry* _internal_mutable_telemetry();
  public:
  void unsafe_arena_set_allocated_telemetry(
      ::uuaspb::Telemetry* telemetry);
  ::uuaspb::Telemetry* unsafe_arena_release_telemetry();

  // @@protoc_insertion_point(class_scope:uuaspb.GeoTagRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::uuaspb::Telemetry* telemetry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_uuaspb_2eproto;
};
// -------------------------------------------------------------------

class GeoTagResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uuaspb.GeoTagResponse) */ {
 public:
  inline GeoTagResponse() : GeoTagResponse(nullptr) {};
  virtual ~GeoTagResponse();

  GeoTagResponse(const GeoTagResponse& from);
  GeoTagResponse(GeoTagResponse&& from) noexcept
    : GeoTagResponse() {
    *this = ::std::move(from);
  }

  inline GeoTagResponse& operator=(const GeoTagResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoTagResponse& operator=(GeoTagResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeoTagResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoTagResponse* internal_default_instance() {
    return reinterpret_cast<const GeoTagResponse*>(
               &_GeoTagResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GeoTagResponse& a, GeoTagResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GeoTagResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeoTagResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeoTagResponse* New() const final {
    return CreateMaybeMessage<GeoTagResponse>(nullptr);
  }

  GeoTagResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeoTagResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeoTagResponse& from);
  void MergeFrom(const GeoTagResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoTagResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uuaspb.GeoTagResponse";
  }
  protected:
  explicit GeoTagResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_uuaspb_2eproto);
    return ::descriptor_table_uuaspb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .uuaspb.ResultStatus result = 1;
  void clear_result();
  ::uuaspb::ResultStatus result() const;
  void set_result(::uuaspb::ResultStatus value);
  private:
  ::uuaspb::ResultStatus _internal_result() const;
  void _internal_set_result(::uuaspb::ResultStatus value);
  public:

  // @@protoc_insertion_point(class_scope:uuaspb.GeoTagResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_uuaspb_2eproto;
};
// -------------------------------------------------------------------

class UnGeoTagRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uuaspb.UnGeoTagRequest) */ {
 public:
  inline UnGeoTagRequest() : UnGeoTagRequest(nullptr) {};
  virtual ~UnGeoTagRequest();

  UnGeoTagRequest(const UnGeoTagRequest& from);
  UnGeoTagRequest(UnGeoTagRequest&& from) noexcept
    : UnGeoTagRequest() {
    *this = ::std::move(from);
  }

  inline UnGeoTagRequest& operator=(const UnGeoTagRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnGeoTagRequest& operator=(UnGeoTagRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnGeoTagRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnGeoTagRequest* internal_default_instance() {
    return reinterpret_cast<const UnGeoTagRequest*>(
               &_UnGeoTagRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UnGeoTagRequest& a, UnGeoTagRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnGeoTagRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnGeoTagRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnGeoTagRequest* New() const final {
    return CreateMaybeMessage<UnGeoTagRequest>(nullptr);
  }

  UnGeoTagRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnGeoTagRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnGeoTagRequest& from);
  void MergeFrom(const UnGeoTagRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnGeoTagRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uuaspb.UnGeoTagRequest";
  }
  protected:
  explicit UnGeoTagRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_uuaspb_2eproto);
    return ::descriptor_table_uuaspb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
  };
  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_filename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_filename(
      std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // @@protoc_insertion_point(class_scope:uuaspb.UnGeoTagRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_uuaspb_2eproto;
};
// -------------------------------------------------------------------

class UnGeoTagResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uuaspb.UnGeoTagResponse) */ {
 public:
  inline UnGeoTagResponse() : UnGeoTagResponse(nullptr) {};
  virtual ~UnGeoTagResponse();

  UnGeoTagResponse(const UnGeoTagResponse& from);
  UnGeoTagResponse(UnGeoTagResponse&& from) noexcept
    : UnGeoTagResponse() {
    *this = ::std::move(from);
  }

  inline UnGeoTagResponse& operator=(const UnGeoTagResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnGeoTagResponse& operator=(UnGeoTagResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnGeoTagResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnGeoTagResponse* internal_default_instance() {
    return reinterpret_cast<const UnGeoTagResponse*>(
               &_UnGeoTagResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UnGeoTagResponse& a, UnGeoTagResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnGeoTagResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnGeoTagResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnGeoTagResponse* New() const final {
    return CreateMaybeMessage<UnGeoTagResponse>(nullptr);
  }

  UnGeoTagResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnGeoTagResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnGeoTagResponse& from);
  void MergeFrom(const UnGeoTagResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnGeoTagResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uuaspb.UnGeoTagResponse";
  }
  protected:
  explicit UnGeoTagResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_uuaspb_2eproto);
    return ::descriptor_table_uuaspb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // .uuaspb.Telemetry telemetry = 2;
  bool has_telemetry() const;
  private:
  bool _internal_has_telemetry() const;
  public:
  void clear_telemetry();
  const ::uuaspb::Telemetry& telemetry() const;
  ::uuaspb::Telemetry* release_telemetry();
  ::uuaspb::Telemetry* mutable_telemetry();
  void set_allocated_telemetry(::uuaspb::Telemetry* telemetry);
  private:
  const ::uuaspb::Telemetry& _internal_telemetry() const;
  ::uuaspb::Telemetry* _internal_mutable_telemetry();
  public:
  void unsafe_arena_set_allocated_telemetry(
      ::uuaspb::Telemetry* telemetry);
  ::uuaspb::Telemetry* unsafe_arena_release_telemetry();

  // .uuaspb.ResultStatus result = 1;
  void clear_result();
  ::uuaspb::ResultStatus result() const;
  void set_result(::uuaspb::ResultStatus value);
  private:
  ::uuaspb::ResultStatus _internal_result() const;
  void _internal_set_result(::uuaspb::ResultStatus value);
  public:

  // @@protoc_insertion_point(class_scope:uuaspb.UnGeoTagResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::uuaspb::Telemetry* telemetry_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_uuaspb_2eproto;
};
// -------------------------------------------------------------------

class Telemetry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uuaspb.Telemetry) */ {
 public:
  inline Telemetry() : Telemetry(nullptr) {};
  virtual ~Telemetry();

  Telemetry(const Telemetry& from);
  Telemetry(Telemetry&& from) noexcept
    : Telemetry() {
    *this = ::std::move(from);
  }

  inline Telemetry& operator=(const Telemetry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Telemetry& operator=(Telemetry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Telemetry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Telemetry* internal_default_instance() {
    return reinterpret_cast<const Telemetry*>(
               &_Telemetry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Telemetry& a, Telemetry& b) {
    a.Swap(&b);
  }
  inline void Swap(Telemetry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Telemetry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Telemetry* New() const final {
    return CreateMaybeMessage<Telemetry>(nullptr);
  }

  Telemetry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Telemetry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Telemetry& from);
  void MergeFrom(const Telemetry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Telemetry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uuaspb.Telemetry";
  }
  protected:
  explicit Telemetry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_uuaspb_2eproto);
    return ::descriptor_table_uuaspb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
    kAltitudeAglMFieldNumber = 3,
    kAltitudeMslMFieldNumber = 4,
    kHeadingDegFieldNumber = 5,
    kVelocityxMSFieldNumber = 6,
    kVelocityyMSFieldNumber = 7,
    kVelocityzMSFieldNumber = 8,
    kRollRadFieldNumber = 9,
    kPitchRadFieldNumber = 10,
    kYawRadFieldNumber = 11,
    kRollspeedRadSFieldNumber = 12,
    kPitchspeedRadSFieldNumber = 13,
    kYawspeedRadSFieldNumber = 14,
    kTimestampPixhawkMsFieldNumber = 15,
    kTimestampMsgMsFieldNumber = 16,
  };
  // double latitude = 1;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 2;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double altitude_agl_m = 3;
  void clear_altitude_agl_m();
  double altitude_agl_m() const;
  void set_altitude_agl_m(double value);
  private:
  double _internal_altitude_agl_m() const;
  void _internal_set_altitude_agl_m(double value);
  public:

  // double altitude_msl_m = 4;
  void clear_altitude_msl_m();
  double altitude_msl_m() const;
  void set_altitude_msl_m(double value);
  private:
  double _internal_altitude_msl_m() const;
  void _internal_set_altitude_msl_m(double value);
  public:

  // double heading_deg = 5;
  void clear_heading_deg();
  double heading_deg() const;
  void set_heading_deg(double value);
  private:
  double _internal_heading_deg() const;
  void _internal_set_heading_deg(double value);
  public:

  // double velocityx_m_s = 6;
  void clear_velocityx_m_s();
  double velocityx_m_s() const;
  void set_velocityx_m_s(double value);
  private:
  double _internal_velocityx_m_s() const;
  void _internal_set_velocityx_m_s(double value);
  public:

  // double velocityy_m_s = 7;
  void clear_velocityy_m_s();
  double velocityy_m_s() const;
  void set_velocityy_m_s(double value);
  private:
  double _internal_velocityy_m_s() const;
  void _internal_set_velocityy_m_s(double value);
  public:

  // double velocityz_m_s = 8;
  void clear_velocityz_m_s();
  double velocityz_m_s() const;
  void set_velocityz_m_s(double value);
  private:
  double _internal_velocityz_m_s() const;
  void _internal_set_velocityz_m_s(double value);
  public:

  // double roll_rad = 9;
  void clear_roll_rad();
  double roll_rad() const;
  void set_roll_rad(double value);
  private:
  double _internal_roll_rad() const;
  void _internal_set_roll_rad(double value);
  public:

  // double pitch_rad = 10;
  void clear_pitch_rad();
  double pitch_rad() const;
  void set_pitch_rad(double value);
  private:
  double _internal_pitch_rad() const;
  void _internal_set_pitch_rad(double value);
  public:

  // double yaw_rad = 11;
  void clear_yaw_rad();
  double yaw_rad() const;
  void set_yaw_rad(double value);
  private:
  double _internal_yaw_rad() const;
  void _internal_set_yaw_rad(double value);
  public:

  // double rollspeed_rad_s = 12;
  void clear_rollspeed_rad_s();
  double rollspeed_rad_s() const;
  void set_rollspeed_rad_s(double value);
  private:
  double _internal_rollspeed_rad_s() const;
  void _internal_set_rollspeed_rad_s(double value);
  public:

  // double pitchspeed_rad_s = 13;
  void clear_pitchspeed_rad_s();
  double pitchspeed_rad_s() const;
  void set_pitchspeed_rad_s(double value);
  private:
  double _internal_pitchspeed_rad_s() const;
  void _internal_set_pitchspeed_rad_s(double value);
  public:

  // double yawspeed_rad_s = 14;
  void clear_yawspeed_rad_s();
  double yawspeed_rad_s() const;
  void set_yawspeed_rad_s(double value);
  private:
  double _internal_yawspeed_rad_s() const;
  void _internal_set_yawspeed_rad_s(double value);
  public:

  // uint64 timestamp_pixhawk_ms = 15;
  void clear_timestamp_pixhawk_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_pixhawk_ms() const;
  void set_timestamp_pixhawk_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp_pixhawk_ms() const;
  void _internal_set_timestamp_pixhawk_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp_msg_ms = 16;
  void clear_timestamp_msg_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_msg_ms() const;
  void set_timestamp_msg_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp_msg_ms() const;
  void _internal_set_timestamp_msg_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:uuaspb.Telemetry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double latitude_;
  double longitude_;
  double altitude_agl_m_;
  double altitude_msl_m_;
  double heading_deg_;
  double velocityx_m_s_;
  double velocityy_m_s_;
  double velocityz_m_s_;
  double roll_rad_;
  double pitch_rad_;
  double yaw_rad_;
  double rollspeed_rad_s_;
  double pitchspeed_rad_s_;
  double yawspeed_rad_s_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_pixhawk_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_msg_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_uuaspb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GeoTagRequest

// string filename = 1;
inline void GeoTagRequest::clear_filename() {
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GeoTagRequest::filename() const {
  // @@protoc_insertion_point(field_get:uuaspb.GeoTagRequest.filename)
  return _internal_filename();
}
inline void GeoTagRequest::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:uuaspb.GeoTagRequest.filename)
}
inline std::string* GeoTagRequest::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:uuaspb.GeoTagRequest.filename)
  return _internal_mutable_filename();
}
inline const std::string& GeoTagRequest::_internal_filename() const {
  return filename_.Get();
}
inline void GeoTagRequest::_internal_set_filename(const std::string& value) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GeoTagRequest::set_filename(std::string&& value) {
  
  filename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:uuaspb.GeoTagRequest.filename)
}
inline void GeoTagRequest::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:uuaspb.GeoTagRequest.filename)
}
inline void GeoTagRequest::set_filename(const char* value,
    size_t size) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:uuaspb.GeoTagRequest.filename)
}
inline std::string* GeoTagRequest::_internal_mutable_filename() {
  
  return filename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GeoTagRequest::release_filename() {
  // @@protoc_insertion_point(field_release:uuaspb.GeoTagRequest.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GeoTagRequest::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:uuaspb.GeoTagRequest.filename)
}
inline std::string* GeoTagRequest::unsafe_arena_release_filename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:uuaspb.GeoTagRequest.filename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return filename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GeoTagRequest::unsafe_arena_set_allocated_filename(
    std::string* filename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      filename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uuaspb.GeoTagRequest.filename)
}

// .uuaspb.Telemetry telemetry = 2;
inline bool GeoTagRequest::_internal_has_telemetry() const {
  return this != internal_default_instance() && telemetry_ != nullptr;
}
inline bool GeoTagRequest::has_telemetry() const {
  return _internal_has_telemetry();
}
inline void GeoTagRequest::clear_telemetry() {
  if (GetArena() == nullptr && telemetry_ != nullptr) {
    delete telemetry_;
  }
  telemetry_ = nullptr;
}
inline const ::uuaspb::Telemetry& GeoTagRequest::_internal_telemetry() const {
  const ::uuaspb::Telemetry* p = telemetry_;
  return p != nullptr ? *p : *reinterpret_cast<const ::uuaspb::Telemetry*>(
      &::uuaspb::_Telemetry_default_instance_);
}
inline const ::uuaspb::Telemetry& GeoTagRequest::telemetry() const {
  // @@protoc_insertion_point(field_get:uuaspb.GeoTagRequest.telemetry)
  return _internal_telemetry();
}
inline void GeoTagRequest::unsafe_arena_set_allocated_telemetry(
    ::uuaspb::Telemetry* telemetry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_);
  }
  telemetry_ = telemetry;
  if (telemetry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uuaspb.GeoTagRequest.telemetry)
}
inline ::uuaspb::Telemetry* GeoTagRequest::release_telemetry() {
  auto temp = unsafe_arena_release_telemetry();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::uuaspb::Telemetry* GeoTagRequest::unsafe_arena_release_telemetry() {
  // @@protoc_insertion_point(field_release:uuaspb.GeoTagRequest.telemetry)
  
  ::uuaspb::Telemetry* temp = telemetry_;
  telemetry_ = nullptr;
  return temp;
}
inline ::uuaspb::Telemetry* GeoTagRequest::_internal_mutable_telemetry() {
  
  if (telemetry_ == nullptr) {
    auto* p = CreateMaybeMessage<::uuaspb::Telemetry>(GetArena());
    telemetry_ = p;
  }
  return telemetry_;
}
inline ::uuaspb::Telemetry* GeoTagRequest::mutable_telemetry() {
  // @@protoc_insertion_point(field_mutable:uuaspb.GeoTagRequest.telemetry)
  return _internal_mutable_telemetry();
}
inline void GeoTagRequest::set_allocated_telemetry(::uuaspb::Telemetry* telemetry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete telemetry_;
  }
  if (telemetry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(telemetry);
    if (message_arena != submessage_arena) {
      telemetry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_ = telemetry;
  // @@protoc_insertion_point(field_set_allocated:uuaspb.GeoTagRequest.telemetry)
}

// -------------------------------------------------------------------

// GeoTagResponse

// .uuaspb.ResultStatus result = 1;
inline void GeoTagResponse::clear_result() {
  result_ = 0;
}
inline ::uuaspb::ResultStatus GeoTagResponse::_internal_result() const {
  return static_cast< ::uuaspb::ResultStatus >(result_);
}
inline ::uuaspb::ResultStatus GeoTagResponse::result() const {
  // @@protoc_insertion_point(field_get:uuaspb.GeoTagResponse.result)
  return _internal_result();
}
inline void GeoTagResponse::_internal_set_result(::uuaspb::ResultStatus value) {
  
  result_ = value;
}
inline void GeoTagResponse::set_result(::uuaspb::ResultStatus value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:uuaspb.GeoTagResponse.result)
}

// -------------------------------------------------------------------

// UnGeoTagRequest

// string filename = 1;
inline void UnGeoTagRequest::clear_filename() {
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UnGeoTagRequest::filename() const {
  // @@protoc_insertion_point(field_get:uuaspb.UnGeoTagRequest.filename)
  return _internal_filename();
}
inline void UnGeoTagRequest::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:uuaspb.UnGeoTagRequest.filename)
}
inline std::string* UnGeoTagRequest::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:uuaspb.UnGeoTagRequest.filename)
  return _internal_mutable_filename();
}
inline const std::string& UnGeoTagRequest::_internal_filename() const {
  return filename_.Get();
}
inline void UnGeoTagRequest::_internal_set_filename(const std::string& value) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnGeoTagRequest::set_filename(std::string&& value) {
  
  filename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:uuaspb.UnGeoTagRequest.filename)
}
inline void UnGeoTagRequest::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:uuaspb.UnGeoTagRequest.filename)
}
inline void UnGeoTagRequest::set_filename(const char* value,
    size_t size) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:uuaspb.UnGeoTagRequest.filename)
}
inline std::string* UnGeoTagRequest::_internal_mutable_filename() {
  
  return filename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnGeoTagRequest::release_filename() {
  // @@protoc_insertion_point(field_release:uuaspb.UnGeoTagRequest.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnGeoTagRequest::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:uuaspb.UnGeoTagRequest.filename)
}
inline std::string* UnGeoTagRequest::unsafe_arena_release_filename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:uuaspb.UnGeoTagRequest.filename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return filename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UnGeoTagRequest::unsafe_arena_set_allocated_filename(
    std::string* filename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      filename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uuaspb.UnGeoTagRequest.filename)
}

// -------------------------------------------------------------------

// UnGeoTagResponse

// .uuaspb.ResultStatus result = 1;
inline void UnGeoTagResponse::clear_result() {
  result_ = 0;
}
inline ::uuaspb::ResultStatus UnGeoTagResponse::_internal_result() const {
  return static_cast< ::uuaspb::ResultStatus >(result_);
}
inline ::uuaspb::ResultStatus UnGeoTagResponse::result() const {
  // @@protoc_insertion_point(field_get:uuaspb.UnGeoTagResponse.result)
  return _internal_result();
}
inline void UnGeoTagResponse::_internal_set_result(::uuaspb::ResultStatus value) {
  
  result_ = value;
}
inline void UnGeoTagResponse::set_result(::uuaspb::ResultStatus value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:uuaspb.UnGeoTagResponse.result)
}

// .uuaspb.Telemetry telemetry = 2;
inline bool UnGeoTagResponse::_internal_has_telemetry() const {
  return this != internal_default_instance() && telemetry_ != nullptr;
}
inline bool UnGeoTagResponse::has_telemetry() const {
  return _internal_has_telemetry();
}
inline void UnGeoTagResponse::clear_telemetry() {
  if (GetArena() == nullptr && telemetry_ != nullptr) {
    delete telemetry_;
  }
  telemetry_ = nullptr;
}
inline const ::uuaspb::Telemetry& UnGeoTagResponse::_internal_telemetry() const {
  const ::uuaspb::Telemetry* p = telemetry_;
  return p != nullptr ? *p : *reinterpret_cast<const ::uuaspb::Telemetry*>(
      &::uuaspb::_Telemetry_default_instance_);
}
inline const ::uuaspb::Telemetry& UnGeoTagResponse::telemetry() const {
  // @@protoc_insertion_point(field_get:uuaspb.UnGeoTagResponse.telemetry)
  return _internal_telemetry();
}
inline void UnGeoTagResponse::unsafe_arena_set_allocated_telemetry(
    ::uuaspb::Telemetry* telemetry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_);
  }
  telemetry_ = telemetry;
  if (telemetry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uuaspb.UnGeoTagResponse.telemetry)
}
inline ::uuaspb::Telemetry* UnGeoTagResponse::release_telemetry() {
  auto temp = unsafe_arena_release_telemetry();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::uuaspb::Telemetry* UnGeoTagResponse::unsafe_arena_release_telemetry() {
  // @@protoc_insertion_point(field_release:uuaspb.UnGeoTagResponse.telemetry)
  
  ::uuaspb::Telemetry* temp = telemetry_;
  telemetry_ = nullptr;
  return temp;
}
inline ::uuaspb::Telemetry* UnGeoTagResponse::_internal_mutable_telemetry() {
  
  if (telemetry_ == nullptr) {
    auto* p = CreateMaybeMessage<::uuaspb::Telemetry>(GetArena());
    telemetry_ = p;
  }
  return telemetry_;
}
inline ::uuaspb::Telemetry* UnGeoTagResponse::mutable_telemetry() {
  // @@protoc_insertion_point(field_mutable:uuaspb.UnGeoTagResponse.telemetry)
  return _internal_mutable_telemetry();
}
inline void UnGeoTagResponse::set_allocated_telemetry(::uuaspb::Telemetry* telemetry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete telemetry_;
  }
  if (telemetry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(telemetry);
    if (message_arena != submessage_arena) {
      telemetry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_ = telemetry;
  // @@protoc_insertion_point(field_set_allocated:uuaspb.UnGeoTagResponse.telemetry)
}

// -------------------------------------------------------------------

// Telemetry

// double latitude = 1;
inline void Telemetry::clear_latitude() {
  latitude_ = 0;
}
inline double Telemetry::_internal_latitude() const {
  return latitude_;
}
inline double Telemetry::latitude() const {
  // @@protoc_insertion_point(field_get:uuaspb.Telemetry.latitude)
  return _internal_latitude();
}
inline void Telemetry::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void Telemetry::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:uuaspb.Telemetry.latitude)
}

// double longitude = 2;
inline void Telemetry::clear_longitude() {
  longitude_ = 0;
}
inline double Telemetry::_internal_longitude() const {
  return longitude_;
}
inline double Telemetry::longitude() const {
  // @@protoc_insertion_point(field_get:uuaspb.Telemetry.longitude)
  return _internal_longitude();
}
inline void Telemetry::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void Telemetry::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:uuaspb.Telemetry.longitude)
}

// double altitude_agl_m = 3;
inline void Telemetry::clear_altitude_agl_m() {
  altitude_agl_m_ = 0;
}
inline double Telemetry::_internal_altitude_agl_m() const {
  return altitude_agl_m_;
}
inline double Telemetry::altitude_agl_m() const {
  // @@protoc_insertion_point(field_get:uuaspb.Telemetry.altitude_agl_m)
  return _internal_altitude_agl_m();
}
inline void Telemetry::_internal_set_altitude_agl_m(double value) {
  
  altitude_agl_m_ = value;
}
inline void Telemetry::set_altitude_agl_m(double value) {
  _internal_set_altitude_agl_m(value);
  // @@protoc_insertion_point(field_set:uuaspb.Telemetry.altitude_agl_m)
}

// double altitude_msl_m = 4;
inline void Telemetry::clear_altitude_msl_m() {
  altitude_msl_m_ = 0;
}
inline double Telemetry::_internal_altitude_msl_m() const {
  return altitude_msl_m_;
}
inline double Telemetry::altitude_msl_m() const {
  // @@protoc_insertion_point(field_get:uuaspb.Telemetry.altitude_msl_m)
  return _internal_altitude_msl_m();
}
inline void Telemetry::_internal_set_altitude_msl_m(double value) {
  
  altitude_msl_m_ = value;
}
inline void Telemetry::set_altitude_msl_m(double value) {
  _internal_set_altitude_msl_m(value);
  // @@protoc_insertion_point(field_set:uuaspb.Telemetry.altitude_msl_m)
}

// double heading_deg = 5;
inline void Telemetry::clear_heading_deg() {
  heading_deg_ = 0;
}
inline double Telemetry::_internal_heading_deg() const {
  return heading_deg_;
}
inline double Telemetry::heading_deg() const {
  // @@protoc_insertion_point(field_get:uuaspb.Telemetry.heading_deg)
  return _internal_heading_deg();
}
inline void Telemetry::_internal_set_heading_deg(double value) {
  
  heading_deg_ = value;
}
inline void Telemetry::set_heading_deg(double value) {
  _internal_set_heading_deg(value);
  // @@protoc_insertion_point(field_set:uuaspb.Telemetry.heading_deg)
}

// double velocityx_m_s = 6;
inline void Telemetry::clear_velocityx_m_s() {
  velocityx_m_s_ = 0;
}
inline double Telemetry::_internal_velocityx_m_s() const {
  return velocityx_m_s_;
}
inline double Telemetry::velocityx_m_s() const {
  // @@protoc_insertion_point(field_get:uuaspb.Telemetry.velocityx_m_s)
  return _internal_velocityx_m_s();
}
inline void Telemetry::_internal_set_velocityx_m_s(double value) {
  
  velocityx_m_s_ = value;
}
inline void Telemetry::set_velocityx_m_s(double value) {
  _internal_set_velocityx_m_s(value);
  // @@protoc_insertion_point(field_set:uuaspb.Telemetry.velocityx_m_s)
}

// double velocityy_m_s = 7;
inline void Telemetry::clear_velocityy_m_s() {
  velocityy_m_s_ = 0;
}
inline double Telemetry::_internal_velocityy_m_s() const {
  return velocityy_m_s_;
}
inline double Telemetry::velocityy_m_s() const {
  // @@protoc_insertion_point(field_get:uuaspb.Telemetry.velocityy_m_s)
  return _internal_velocityy_m_s();
}
inline void Telemetry::_internal_set_velocityy_m_s(double value) {
  
  velocityy_m_s_ = value;
}
inline void Telemetry::set_velocityy_m_s(double value) {
  _internal_set_velocityy_m_s(value);
  // @@protoc_insertion_point(field_set:uuaspb.Telemetry.velocityy_m_s)
}

// double velocityz_m_s = 8;
inline void Telemetry::clear_velocityz_m_s() {
  velocityz_m_s_ = 0;
}
inline double Telemetry::_internal_velocityz_m_s() const {
  return velocityz_m_s_;
}
inline double Telemetry::velocityz_m_s() const {
  // @@protoc_insertion_point(field_get:uuaspb.Telemetry.velocityz_m_s)
  return _internal_velocityz_m_s();
}
inline void Telemetry::_internal_set_velocityz_m_s(double value) {
  
  velocityz_m_s_ = value;
}
inline void Telemetry::set_velocityz_m_s(double value) {
  _internal_set_velocityz_m_s(value);
  // @@protoc_insertion_point(field_set:uuaspb.Telemetry.velocityz_m_s)
}

// double roll_rad = 9;
inline void Telemetry::clear_roll_rad() {
  roll_rad_ = 0;
}
inline double Telemetry::_internal_roll_rad() const {
  return roll_rad_;
}
inline double Telemetry::roll_rad() const {
  // @@protoc_insertion_point(field_get:uuaspb.Telemetry.roll_rad)
  return _internal_roll_rad();
}
inline void Telemetry::_internal_set_roll_rad(double value) {
  
  roll_rad_ = value;
}
inline void Telemetry::set_roll_rad(double value) {
  _internal_set_roll_rad(value);
  // @@protoc_insertion_point(field_set:uuaspb.Telemetry.roll_rad)
}

// double pitch_rad = 10;
inline void Telemetry::clear_pitch_rad() {
  pitch_rad_ = 0;
}
inline double Telemetry::_internal_pitch_rad() const {
  return pitch_rad_;
}
inline double Telemetry::pitch_rad() const {
  // @@protoc_insertion_point(field_get:uuaspb.Telemetry.pitch_rad)
  return _internal_pitch_rad();
}
inline void Telemetry::_internal_set_pitch_rad(double value) {
  
  pitch_rad_ = value;
}
inline void Telemetry::set_pitch_rad(double value) {
  _internal_set_pitch_rad(value);
  // @@protoc_insertion_point(field_set:uuaspb.Telemetry.pitch_rad)
}

// double yaw_rad = 11;
inline void Telemetry::clear_yaw_rad() {
  yaw_rad_ = 0;
}
inline double Telemetry::_internal_yaw_rad() const {
  return yaw_rad_;
}
inline double Telemetry::yaw_rad() const {
  // @@protoc_insertion_point(field_get:uuaspb.Telemetry.yaw_rad)
  return _internal_yaw_rad();
}
inline void Telemetry::_internal_set_yaw_rad(double value) {
  
  yaw_rad_ = value;
}
inline void Telemetry::set_yaw_rad(double value) {
  _internal_set_yaw_rad(value);
  // @@protoc_insertion_point(field_set:uuaspb.Telemetry.yaw_rad)
}

// double rollspeed_rad_s = 12;
inline void Telemetry::clear_rollspeed_rad_s() {
  rollspeed_rad_s_ = 0;
}
inline double Telemetry::_internal_rollspeed_rad_s() const {
  return rollspeed_rad_s_;
}
inline double Telemetry::rollspeed_rad_s() const {
  // @@protoc_insertion_point(field_get:uuaspb.Telemetry.rollspeed_rad_s)
  return _internal_rollspeed_rad_s();
}
inline void Telemetry::_internal_set_rollspeed_rad_s(double value) {
  
  rollspeed_rad_s_ = value;
}
inline void Telemetry::set_rollspeed_rad_s(double value) {
  _internal_set_rollspeed_rad_s(value);
  // @@protoc_insertion_point(field_set:uuaspb.Telemetry.rollspeed_rad_s)
}

// double pitchspeed_rad_s = 13;
inline void Telemetry::clear_pitchspeed_rad_s() {
  pitchspeed_rad_s_ = 0;
}
inline double Telemetry::_internal_pitchspeed_rad_s() const {
  return pitchspeed_rad_s_;
}
inline double Telemetry::pitchspeed_rad_s() const {
  // @@protoc_insertion_point(field_get:uuaspb.Telemetry.pitchspeed_rad_s)
  return _internal_pitchspeed_rad_s();
}
inline void Telemetry::_internal_set_pitchspeed_rad_s(double value) {
  
  pitchspeed_rad_s_ = value;
}
inline void Telemetry::set_pitchspeed_rad_s(double value) {
  _internal_set_pitchspeed_rad_s(value);
  // @@protoc_insertion_point(field_set:uuaspb.Telemetry.pitchspeed_rad_s)
}

// double yawspeed_rad_s = 14;
inline void Telemetry::clear_yawspeed_rad_s() {
  yawspeed_rad_s_ = 0;
}
inline double Telemetry::_internal_yawspeed_rad_s() const {
  return yawspeed_rad_s_;
}
inline double Telemetry::yawspeed_rad_s() const {
  // @@protoc_insertion_point(field_get:uuaspb.Telemetry.yawspeed_rad_s)
  return _internal_yawspeed_rad_s();
}
inline void Telemetry::_internal_set_yawspeed_rad_s(double value) {
  
  yawspeed_rad_s_ = value;
}
inline void Telemetry::set_yawspeed_rad_s(double value) {
  _internal_set_yawspeed_rad_s(value);
  // @@protoc_insertion_point(field_set:uuaspb.Telemetry.yawspeed_rad_s)
}

// uint64 timestamp_pixhawk_ms = 15;
inline void Telemetry::clear_timestamp_pixhawk_ms() {
  timestamp_pixhawk_ms_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Telemetry::_internal_timestamp_pixhawk_ms() const {
  return timestamp_pixhawk_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Telemetry::timestamp_pixhawk_ms() const {
  // @@protoc_insertion_point(field_get:uuaspb.Telemetry.timestamp_pixhawk_ms)
  return _internal_timestamp_pixhawk_ms();
}
inline void Telemetry::_internal_set_timestamp_pixhawk_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_pixhawk_ms_ = value;
}
inline void Telemetry::set_timestamp_pixhawk_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp_pixhawk_ms(value);
  // @@protoc_insertion_point(field_set:uuaspb.Telemetry.timestamp_pixhawk_ms)
}

// uint64 timestamp_msg_ms = 16;
inline void Telemetry::clear_timestamp_msg_ms() {
  timestamp_msg_ms_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Telemetry::_internal_timestamp_msg_ms() const {
  return timestamp_msg_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Telemetry::timestamp_msg_ms() const {
  // @@protoc_insertion_point(field_get:uuaspb.Telemetry.timestamp_msg_ms)
  return _internal_timestamp_msg_ms();
}
inline void Telemetry::_internal_set_timestamp_msg_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_msg_ms_ = value;
}
inline void Telemetry::set_timestamp_msg_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp_msg_ms(value);
  // @@protoc_insertion_point(field_set:uuaspb.Telemetry.timestamp_msg_ms)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace uuaspb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::uuaspb::ResultStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::uuaspb::ResultStatus>() {
  return ::uuaspb::ResultStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_uuaspb_2eproto
