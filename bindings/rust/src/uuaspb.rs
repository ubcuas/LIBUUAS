// This file is generated by rust-protobuf 2.16.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `uuaspb.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_16_2;

#[derive(PartialEq,Clone,Default)]
pub struct GeoTagRequest {
    // message fields
    pub filename: ::std::string::String,
    pub telemetry: ::protobuf::SingularPtrField<Telemetry>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GeoTagRequest {
    fn default() -> &'a GeoTagRequest {
        <GeoTagRequest as ::protobuf::Message>::default_instance()
    }
}

impl GeoTagRequest {
    pub fn new() -> GeoTagRequest {
        ::std::default::Default::default()
    }

    // string filename = 1;


    pub fn get_filename(&self) -> &str {
        &self.filename
    }
    pub fn clear_filename(&mut self) {
        self.filename.clear();
    }

    // Param is passed by value, moved
    pub fn set_filename(&mut self, v: ::std::string::String) {
        self.filename = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filename(&mut self) -> &mut ::std::string::String {
        &mut self.filename
    }

    // Take field
    pub fn take_filename(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filename, ::std::string::String::new())
    }

    // .uuas.Telemetry telemetry = 2;


    pub fn get_telemetry(&self) -> &Telemetry {
        self.telemetry.as_ref().unwrap_or_else(|| <Telemetry as ::protobuf::Message>::default_instance())
    }
    pub fn clear_telemetry(&mut self) {
        self.telemetry.clear();
    }

    pub fn has_telemetry(&self) -> bool {
        self.telemetry.is_some()
    }

    // Param is passed by value, moved
    pub fn set_telemetry(&mut self, v: Telemetry) {
        self.telemetry = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_telemetry(&mut self) -> &mut Telemetry {
        if self.telemetry.is_none() {
            self.telemetry.set_default();
        }
        self.telemetry.as_mut().unwrap()
    }

    // Take field
    pub fn take_telemetry(&mut self) -> Telemetry {
        self.telemetry.take().unwrap_or_else(|| Telemetry::new())
    }
}

impl ::protobuf::Message for GeoTagRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.telemetry {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filename)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.telemetry)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.filename.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.filename);
        }
        if let Some(ref v) = self.telemetry.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.filename.is_empty() {
            os.write_string(1, &self.filename)?;
        }
        if let Some(ref v) = self.telemetry.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GeoTagRequest {
        GeoTagRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "filename",
                |m: &GeoTagRequest| { &m.filename },
                |m: &mut GeoTagRequest| { &mut m.filename },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Telemetry>>(
                "telemetry",
                |m: &GeoTagRequest| { &m.telemetry },
                |m: &mut GeoTagRequest| { &mut m.telemetry },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GeoTagRequest>(
                "GeoTagRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GeoTagRequest {
        static instance: ::protobuf::rt::LazyV2<GeoTagRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GeoTagRequest::new)
    }
}

impl ::protobuf::Clear for GeoTagRequest {
    fn clear(&mut self) {
        self.filename.clear();
        self.telemetry.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GeoTagRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GeoTagRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Telemetry {
    // message fields
    pub latitude: i32,
    pub longitude: i32,
    pub altitude_agl_meters: i32,
    pub altitude_msl_meters: i32,
    pub heading_degrees: u32,
    pub velocity_x_cm_s: i32,
    pub velocity_y_cm_s: i32,
    pub velocity_z_cm_s: i32,
    pub roll_rad: f64,
    pub pitch_rad: f64,
    pub yaw_rad: f64,
    pub rollspeed_rad_s: f64,
    pub pitchspeed_rad_s: f64,
    pub yawspeed_rad_s: f64,
    pub timestamp_telem_ms: u64,
    pub timestamp_msg_ms: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Telemetry {
    fn default() -> &'a Telemetry {
        <Telemetry as ::protobuf::Message>::default_instance()
    }
}

impl Telemetry {
    pub fn new() -> Telemetry {
        ::std::default::Default::default()
    }

    // sint32 latitude = 1;


    pub fn get_latitude(&self) -> i32 {
        self.latitude
    }
    pub fn clear_latitude(&mut self) {
        self.latitude = 0;
    }

    // Param is passed by value, moved
    pub fn set_latitude(&mut self, v: i32) {
        self.latitude = v;
    }

    // sint32 longitude = 2;


    pub fn get_longitude(&self) -> i32 {
        self.longitude
    }
    pub fn clear_longitude(&mut self) {
        self.longitude = 0;
    }

    // Param is passed by value, moved
    pub fn set_longitude(&mut self, v: i32) {
        self.longitude = v;
    }

    // sint32 altitude_agl_meters = 3;


    pub fn get_altitude_agl_meters(&self) -> i32 {
        self.altitude_agl_meters
    }
    pub fn clear_altitude_agl_meters(&mut self) {
        self.altitude_agl_meters = 0;
    }

    // Param is passed by value, moved
    pub fn set_altitude_agl_meters(&mut self, v: i32) {
        self.altitude_agl_meters = v;
    }

    // sint32 altitude_msl_meters = 4;


    pub fn get_altitude_msl_meters(&self) -> i32 {
        self.altitude_msl_meters
    }
    pub fn clear_altitude_msl_meters(&mut self) {
        self.altitude_msl_meters = 0;
    }

    // Param is passed by value, moved
    pub fn set_altitude_msl_meters(&mut self, v: i32) {
        self.altitude_msl_meters = v;
    }

    // uint32 heading_degrees = 5;


    pub fn get_heading_degrees(&self) -> u32 {
        self.heading_degrees
    }
    pub fn clear_heading_degrees(&mut self) {
        self.heading_degrees = 0;
    }

    // Param is passed by value, moved
    pub fn set_heading_degrees(&mut self, v: u32) {
        self.heading_degrees = v;
    }

    // sint32 velocity_x_cm_s = 6;


    pub fn get_velocity_x_cm_s(&self) -> i32 {
        self.velocity_x_cm_s
    }
    pub fn clear_velocity_x_cm_s(&mut self) {
        self.velocity_x_cm_s = 0;
    }

    // Param is passed by value, moved
    pub fn set_velocity_x_cm_s(&mut self, v: i32) {
        self.velocity_x_cm_s = v;
    }

    // sint32 velocity_y_cm_s = 7;


    pub fn get_velocity_y_cm_s(&self) -> i32 {
        self.velocity_y_cm_s
    }
    pub fn clear_velocity_y_cm_s(&mut self) {
        self.velocity_y_cm_s = 0;
    }

    // Param is passed by value, moved
    pub fn set_velocity_y_cm_s(&mut self, v: i32) {
        self.velocity_y_cm_s = v;
    }

    // sint32 velocity_z_cm_s = 8;


    pub fn get_velocity_z_cm_s(&self) -> i32 {
        self.velocity_z_cm_s
    }
    pub fn clear_velocity_z_cm_s(&mut self) {
        self.velocity_z_cm_s = 0;
    }

    // Param is passed by value, moved
    pub fn set_velocity_z_cm_s(&mut self, v: i32) {
        self.velocity_z_cm_s = v;
    }

    // double roll_rad = 9;


    pub fn get_roll_rad(&self) -> f64 {
        self.roll_rad
    }
    pub fn clear_roll_rad(&mut self) {
        self.roll_rad = 0.;
    }

    // Param is passed by value, moved
    pub fn set_roll_rad(&mut self, v: f64) {
        self.roll_rad = v;
    }

    // double pitch_rad = 10;


    pub fn get_pitch_rad(&self) -> f64 {
        self.pitch_rad
    }
    pub fn clear_pitch_rad(&mut self) {
        self.pitch_rad = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pitch_rad(&mut self, v: f64) {
        self.pitch_rad = v;
    }

    // double yaw_rad = 11;


    pub fn get_yaw_rad(&self) -> f64 {
        self.yaw_rad
    }
    pub fn clear_yaw_rad(&mut self) {
        self.yaw_rad = 0.;
    }

    // Param is passed by value, moved
    pub fn set_yaw_rad(&mut self, v: f64) {
        self.yaw_rad = v;
    }

    // double rollspeed_rad_s = 12;


    pub fn get_rollspeed_rad_s(&self) -> f64 {
        self.rollspeed_rad_s
    }
    pub fn clear_rollspeed_rad_s(&mut self) {
        self.rollspeed_rad_s = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rollspeed_rad_s(&mut self, v: f64) {
        self.rollspeed_rad_s = v;
    }

    // double pitchspeed_rad_s = 13;


    pub fn get_pitchspeed_rad_s(&self) -> f64 {
        self.pitchspeed_rad_s
    }
    pub fn clear_pitchspeed_rad_s(&mut self) {
        self.pitchspeed_rad_s = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pitchspeed_rad_s(&mut self, v: f64) {
        self.pitchspeed_rad_s = v;
    }

    // double yawspeed_rad_s = 14;


    pub fn get_yawspeed_rad_s(&self) -> f64 {
        self.yawspeed_rad_s
    }
    pub fn clear_yawspeed_rad_s(&mut self) {
        self.yawspeed_rad_s = 0.;
    }

    // Param is passed by value, moved
    pub fn set_yawspeed_rad_s(&mut self, v: f64) {
        self.yawspeed_rad_s = v;
    }

    // uint64 timestamp_telem_ms = 15;


    pub fn get_timestamp_telem_ms(&self) -> u64 {
        self.timestamp_telem_ms
    }
    pub fn clear_timestamp_telem_ms(&mut self) {
        self.timestamp_telem_ms = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp_telem_ms(&mut self, v: u64) {
        self.timestamp_telem_ms = v;
    }

    // uint64 timestamp_msg_ms = 16;


    pub fn get_timestamp_msg_ms(&self) -> u64 {
        self.timestamp_msg_ms
    }
    pub fn clear_timestamp_msg_ms(&mut self) {
        self.timestamp_msg_ms = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp_msg_ms(&mut self, v: u64) {
        self.timestamp_msg_ms = v;
    }
}

impl ::protobuf::Message for Telemetry {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.latitude = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.longitude = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.altitude_agl_meters = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.altitude_msl_meters = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.heading_degrees = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.velocity_x_cm_s = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.velocity_y_cm_s = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.velocity_z_cm_s = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.roll_rad = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pitch_rad = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.yaw_rad = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.rollspeed_rad_s = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.pitchspeed_rad_s = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.yawspeed_rad_s = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp_telem_ms = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp_msg_ms = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.latitude != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(1, self.latitude);
        }
        if self.longitude != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(2, self.longitude);
        }
        if self.altitude_agl_meters != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(3, self.altitude_agl_meters);
        }
        if self.altitude_msl_meters != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(4, self.altitude_msl_meters);
        }
        if self.heading_degrees != 0 {
            my_size += ::protobuf::rt::value_size(5, self.heading_degrees, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.velocity_x_cm_s != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(6, self.velocity_x_cm_s);
        }
        if self.velocity_y_cm_s != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(7, self.velocity_y_cm_s);
        }
        if self.velocity_z_cm_s != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(8, self.velocity_z_cm_s);
        }
        if self.roll_rad != 0. {
            my_size += 9;
        }
        if self.pitch_rad != 0. {
            my_size += 9;
        }
        if self.yaw_rad != 0. {
            my_size += 9;
        }
        if self.rollspeed_rad_s != 0. {
            my_size += 9;
        }
        if self.pitchspeed_rad_s != 0. {
            my_size += 9;
        }
        if self.yawspeed_rad_s != 0. {
            my_size += 9;
        }
        if self.timestamp_telem_ms != 0 {
            my_size += ::protobuf::rt::value_size(15, self.timestamp_telem_ms, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.timestamp_msg_ms != 0 {
            my_size += ::protobuf::rt::value_size(16, self.timestamp_msg_ms, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.latitude != 0 {
            os.write_sint32(1, self.latitude)?;
        }
        if self.longitude != 0 {
            os.write_sint32(2, self.longitude)?;
        }
        if self.altitude_agl_meters != 0 {
            os.write_sint32(3, self.altitude_agl_meters)?;
        }
        if self.altitude_msl_meters != 0 {
            os.write_sint32(4, self.altitude_msl_meters)?;
        }
        if self.heading_degrees != 0 {
            os.write_uint32(5, self.heading_degrees)?;
        }
        if self.velocity_x_cm_s != 0 {
            os.write_sint32(6, self.velocity_x_cm_s)?;
        }
        if self.velocity_y_cm_s != 0 {
            os.write_sint32(7, self.velocity_y_cm_s)?;
        }
        if self.velocity_z_cm_s != 0 {
            os.write_sint32(8, self.velocity_z_cm_s)?;
        }
        if self.roll_rad != 0. {
            os.write_double(9, self.roll_rad)?;
        }
        if self.pitch_rad != 0. {
            os.write_double(10, self.pitch_rad)?;
        }
        if self.yaw_rad != 0. {
            os.write_double(11, self.yaw_rad)?;
        }
        if self.rollspeed_rad_s != 0. {
            os.write_double(12, self.rollspeed_rad_s)?;
        }
        if self.pitchspeed_rad_s != 0. {
            os.write_double(13, self.pitchspeed_rad_s)?;
        }
        if self.yawspeed_rad_s != 0. {
            os.write_double(14, self.yawspeed_rad_s)?;
        }
        if self.timestamp_telem_ms != 0 {
            os.write_uint64(15, self.timestamp_telem_ms)?;
        }
        if self.timestamp_msg_ms != 0 {
            os.write_uint64(16, self.timestamp_msg_ms)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Telemetry {
        Telemetry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                "latitude",
                |m: &Telemetry| { &m.latitude },
                |m: &mut Telemetry| { &mut m.latitude },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                "longitude",
                |m: &Telemetry| { &m.longitude },
                |m: &mut Telemetry| { &mut m.longitude },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                "altitude_agl_meters",
                |m: &Telemetry| { &m.altitude_agl_meters },
                |m: &mut Telemetry| { &mut m.altitude_agl_meters },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                "altitude_msl_meters",
                |m: &Telemetry| { &m.altitude_msl_meters },
                |m: &mut Telemetry| { &mut m.altitude_msl_meters },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "heading_degrees",
                |m: &Telemetry| { &m.heading_degrees },
                |m: &mut Telemetry| { &mut m.heading_degrees },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                "velocity_x_cm_s",
                |m: &Telemetry| { &m.velocity_x_cm_s },
                |m: &mut Telemetry| { &mut m.velocity_x_cm_s },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                "velocity_y_cm_s",
                |m: &Telemetry| { &m.velocity_y_cm_s },
                |m: &mut Telemetry| { &mut m.velocity_y_cm_s },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                "velocity_z_cm_s",
                |m: &Telemetry| { &m.velocity_z_cm_s },
                |m: &mut Telemetry| { &mut m.velocity_z_cm_s },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "roll_rad",
                |m: &Telemetry| { &m.roll_rad },
                |m: &mut Telemetry| { &mut m.roll_rad },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pitch_rad",
                |m: &Telemetry| { &m.pitch_rad },
                |m: &mut Telemetry| { &mut m.pitch_rad },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "yaw_rad",
                |m: &Telemetry| { &m.yaw_rad },
                |m: &mut Telemetry| { &mut m.yaw_rad },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "rollspeed_rad_s",
                |m: &Telemetry| { &m.rollspeed_rad_s },
                |m: &mut Telemetry| { &mut m.rollspeed_rad_s },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "pitchspeed_rad_s",
                |m: &Telemetry| { &m.pitchspeed_rad_s },
                |m: &mut Telemetry| { &mut m.pitchspeed_rad_s },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "yawspeed_rad_s",
                |m: &Telemetry| { &m.yawspeed_rad_s },
                |m: &mut Telemetry| { &mut m.yawspeed_rad_s },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timestamp_telem_ms",
                |m: &Telemetry| { &m.timestamp_telem_ms },
                |m: &mut Telemetry| { &mut m.timestamp_telem_ms },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timestamp_msg_ms",
                |m: &Telemetry| { &m.timestamp_msg_ms },
                |m: &mut Telemetry| { &mut m.timestamp_msg_ms },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Telemetry>(
                "Telemetry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Telemetry {
        static instance: ::protobuf::rt::LazyV2<Telemetry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Telemetry::new)
    }
}

impl ::protobuf::Clear for Telemetry {
    fn clear(&mut self) {
        self.latitude = 0;
        self.longitude = 0;
        self.altitude_agl_meters = 0;
        self.altitude_msl_meters = 0;
        self.heading_degrees = 0;
        self.velocity_x_cm_s = 0;
        self.velocity_y_cm_s = 0;
        self.velocity_z_cm_s = 0;
        self.roll_rad = 0.;
        self.pitch_rad = 0.;
        self.yaw_rad = 0.;
        self.rollspeed_rad_s = 0.;
        self.pitchspeed_rad_s = 0.;
        self.yawspeed_rad_s = 0.;
        self.timestamp_telem_ms = 0;
        self.timestamp_msg_ms = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Telemetry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Telemetry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cuuaspb.proto\x12\x04uuas\"Z\n\rGeoTagRequest\x12\x1a\n\x08filename\
    \x18\x01\x20\x01(\tR\x08filename\x12-\n\ttelemetry\x18\x02\x20\x01(\x0b2\
    \x0f.uuas.TelemetryR\ttelemetry\"\xe4\x04\n\tTelemetry\x12\x1a\n\x08lati\
    tude\x18\x01\x20\x01(\x11R\x08latitude\x12\x1c\n\tlongitude\x18\x02\x20\
    \x01(\x11R\tlongitude\x12.\n\x13altitude_agl_meters\x18\x03\x20\x01(\x11\
    R\x11altitudeAglMeters\x12.\n\x13altitude_msl_meters\x18\x04\x20\x01(\
    \x11R\x11altitudeMslMeters\x12'\n\x0fheading_degrees\x18\x05\x20\x01(\rR\
    \x0eheadingDegrees\x12%\n\x0fvelocity_x_cm_s\x18\x06\x20\x01(\x11R\x0cve\
    locityXCmS\x12%\n\x0fvelocity_y_cm_s\x18\x07\x20\x01(\x11R\x0cvelocityYC\
    mS\x12%\n\x0fvelocity_z_cm_s\x18\x08\x20\x01(\x11R\x0cvelocityZCmS\x12\
    \x19\n\x08roll_rad\x18\t\x20\x01(\x01R\x07rollRad\x12\x1b\n\tpitch_rad\
    \x18\n\x20\x01(\x01R\x08pitchRad\x12\x17\n\x07yaw_rad\x18\x0b\x20\x01(\
    \x01R\x06yawRad\x12&\n\x0frollspeed_rad_s\x18\x0c\x20\x01(\x01R\rrollspe\
    edRadS\x12(\n\x10pitchspeed_rad_s\x18\r\x20\x01(\x01R\x0epitchspeedRadS\
    \x12$\n\x0eyawspeed_rad_s\x18\x0e\x20\x01(\x01R\x0cyawspeedRadS\x12,\n\
    \x12timestamp_telem_ms\x18\x0f\x20\x01(\x04R\x10timestampTelemMs\x12(\n\
    \x10timestamp_msg_ms\x18\x10\x20\x01(\x04R\x0etimestampMsgMsJ\xaa\x08\n\
    \x06\x12\x04\0\0\x1f\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x02\0\r\n\n\n\x02\x04\0\x12\x04\x04\0\x07\x01\n\n\n\x03\x04\0\
    \x01\x12\x03\x04\x08\x15\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\x04\x18\n\
    \x0c\n\x05\x04\0\x02\0\x05\x12\x03\x05\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03\x05\x0b\x13\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x05\x16\x17\n\
    \x0b\n\x04\x04\0\x02\x01\x12\x03\x06\x04\x1c\n\x0c\n\x05\x04\0\x02\x01\
    \x06\x12\x03\x06\x04\r\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x06\x0e\x17\
    \n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x06\x1a\x1b\n\n\n\x02\x04\x01\x12\
    \x04\t\0\x1f\x01\n\n\n\x03\x04\x01\x01\x12\x03\t\x08\x11\n\x0b\n\x04\x04\
    \x01\x02\0\x12\x03\n\x04\x18\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\n\x04\
    \n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\n\x0b\x13\n\x0c\n\x05\x04\x01\
    \x02\0\x03\x12\x03\n\x16\x17\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0b\x04\
    \x19\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0b\x04\n\n\x0c\n\x05\x04\
    \x01\x02\x01\x01\x12\x03\x0b\x0b\x14\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\
    \x03\x0b\x17\x18\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\r\x04#\n\x0c\n\x05\
    \x04\x01\x02\x02\x05\x12\x03\r\x04\n\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\
    \x03\r\x0b\x1e\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\r!\"\n\x0b\n\x04\
    \x04\x01\x02\x03\x12\x03\x0e\x04#\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\
    \x03\x0e\x04\n\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x0e\x0b\x1e\n\x0c\
    \n\x05\x04\x01\x02\x03\x03\x12\x03\x0e!\"\n\x0b\n\x04\x04\x01\x02\x04\
    \x12\x03\x0f\x04\x1f\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03\x0f\x04\n\n\
    \x0c\n\x05\x04\x01\x02\x04\x01\x12\x03\x0f\x0b\x1a\n\x0c\n\x05\x04\x01\
    \x02\x04\x03\x12\x03\x0f\x1d\x1e\n\x0b\n\x04\x04\x01\x02\x05\x12\x03\x11\
    \x04\x1f\n\x0c\n\x05\x04\x01\x02\x05\x05\x12\x03\x11\x04\n\n\x0c\n\x05\
    \x04\x01\x02\x05\x01\x12\x03\x11\x0b\x1a\n\x0c\n\x05\x04\x01\x02\x05\x03\
    \x12\x03\x11\x1d\x1e\n\x0b\n\x04\x04\x01\x02\x06\x12\x03\x12\x04\x1f\n\
    \x0c\n\x05\x04\x01\x02\x06\x05\x12\x03\x12\x04\n\n\x0c\n\x05\x04\x01\x02\
    \x06\x01\x12\x03\x12\x0b\x1a\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x03\x12\
    \x1d\x1e\n\x0b\n\x04\x04\x01\x02\x07\x12\x03\x13\x04\x1f\n\x0c\n\x05\x04\
    \x01\x02\x07\x05\x12\x03\x13\x04\n\n\x0c\n\x05\x04\x01\x02\x07\x01\x12\
    \x03\x13\x0b\x1a\n\x0c\n\x05\x04\x01\x02\x07\x03\x12\x03\x13\x1d\x1e\n\
    \x0b\n\x04\x04\x01\x02\x08\x12\x03\x15\x04\x18\n\x0c\n\x05\x04\x01\x02\
    \x08\x05\x12\x03\x15\x04\n\n\x0c\n\x05\x04\x01\x02\x08\x01\x12\x03\x15\
    \x0b\x13\n\x0c\n\x05\x04\x01\x02\x08\x03\x12\x03\x15\x16\x17\n\x0b\n\x04\
    \x04\x01\x02\t\x12\x03\x16\x04\x1a\n\x0c\n\x05\x04\x01\x02\t\x05\x12\x03\
    \x16\x04\n\n\x0c\n\x05\x04\x01\x02\t\x01\x12\x03\x16\x0b\x14\n\x0c\n\x05\
    \x04\x01\x02\t\x03\x12\x03\x16\x17\x19\n\x0b\n\x04\x04\x01\x02\n\x12\x03\
    \x17\x04\x18\n\x0c\n\x05\x04\x01\x02\n\x05\x12\x03\x17\x04\n\n\x0c\n\x05\
    \x04\x01\x02\n\x01\x12\x03\x17\x0b\x12\n\x0c\n\x05\x04\x01\x02\n\x03\x12\
    \x03\x17\x15\x17\n\x0b\n\x04\x04\x01\x02\x0b\x12\x03\x19\x04\x20\n\x0c\n\
    \x05\x04\x01\x02\x0b\x05\x12\x03\x19\x04\n\n\x0c\n\x05\x04\x01\x02\x0b\
    \x01\x12\x03\x19\x0b\x1a\n\x0c\n\x05\x04\x01\x02\x0b\x03\x12\x03\x19\x1d\
    \x1f\n\x0b\n\x04\x04\x01\x02\x0c\x12\x03\x1a\x04!\n\x0c\n\x05\x04\x01\
    \x02\x0c\x05\x12\x03\x1a\x04\n\n\x0c\n\x05\x04\x01\x02\x0c\x01\x12\x03\
    \x1a\x0b\x1b\n\x0c\n\x05\x04\x01\x02\x0c\x03\x12\x03\x1a\x1e\x20\n\x0b\n\
    \x04\x04\x01\x02\r\x12\x03\x1b\x04\x1f\n\x0c\n\x05\x04\x01\x02\r\x05\x12\
    \x03\x1b\x04\n\n\x0c\n\x05\x04\x01\x02\r\x01\x12\x03\x1b\x0b\x19\n\x0c\n\
    \x05\x04\x01\x02\r\x03\x12\x03\x1b\x1c\x1e\n\x0b\n\x04\x04\x01\x02\x0e\
    \x12\x03\x1d\x04#\n\x0c\n\x05\x04\x01\x02\x0e\x05\x12\x03\x1d\x04\n\n\
    \x0c\n\x05\x04\x01\x02\x0e\x01\x12\x03\x1d\x0b\x1d\n\x0c\n\x05\x04\x01\
    \x02\x0e\x03\x12\x03\x1d\x20\"\n\x0b\n\x04\x04\x01\x02\x0f\x12\x03\x1e\
    \x04!\n\x0c\n\x05\x04\x01\x02\x0f\x05\x12\x03\x1e\x04\n\n\x0c\n\x05\x04\
    \x01\x02\x0f\x01\x12\x03\x1e\x0b\x1b\n\x0c\n\x05\x04\x01\x02\x0f\x03\x12\
    \x03\x1e\x1e\x20b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
