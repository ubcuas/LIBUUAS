// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uuaspb.proto

#include "uuaspb.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_uuaspb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Telemetry_uuaspb_2eproto;
namespace uuas {
class GeoTagRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoTagRequest> _instance;
} _GeoTagRequest_default_instance_;
class GeoTagResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoTagResponse> _instance;
} _GeoTagResponse_default_instance_;
class UnGeoTagRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnGeoTagRequest> _instance;
} _UnGeoTagRequest_default_instance_;
class UnGeoTagResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnGeoTagResponse> _instance;
} _UnGeoTagResponse_default_instance_;
class TelemetryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Telemetry> _instance;
} _Telemetry_default_instance_;
}  // namespace uuas
static void InitDefaultsscc_info_GeoTagRequest_uuaspb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::uuas::_GeoTagRequest_default_instance_;
    new (ptr) ::uuas::GeoTagRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::uuas::GeoTagRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoTagRequest_uuaspb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GeoTagRequest_uuaspb_2eproto}, {
      &scc_info_Telemetry_uuaspb_2eproto.base,}};

static void InitDefaultsscc_info_GeoTagResponse_uuaspb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::uuas::_GeoTagResponse_default_instance_;
    new (ptr) ::uuas::GeoTagResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::uuas::GeoTagResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeoTagResponse_uuaspb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GeoTagResponse_uuaspb_2eproto}, {}};

static void InitDefaultsscc_info_Telemetry_uuaspb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::uuas::_Telemetry_default_instance_;
    new (ptr) ::uuas::Telemetry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::uuas::Telemetry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Telemetry_uuaspb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Telemetry_uuaspb_2eproto}, {}};

static void InitDefaultsscc_info_UnGeoTagRequest_uuaspb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::uuas::_UnGeoTagRequest_default_instance_;
    new (ptr) ::uuas::UnGeoTagRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::uuas::UnGeoTagRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnGeoTagRequest_uuaspb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnGeoTagRequest_uuaspb_2eproto}, {}};

static void InitDefaultsscc_info_UnGeoTagResponse_uuaspb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::uuas::_UnGeoTagResponse_default_instance_;
    new (ptr) ::uuas::UnGeoTagResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::uuas::UnGeoTagResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnGeoTagResponse_uuaspb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UnGeoTagResponse_uuaspb_2eproto}, {
      &scc_info_Telemetry_uuaspb_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_uuaspb_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_uuaspb_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_uuaspb_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_uuaspb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uuas::GeoTagRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::uuas::GeoTagRequest, filename_),
  PROTOBUF_FIELD_OFFSET(::uuas::GeoTagRequest, telemetry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uuas::GeoTagResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::uuas::GeoTagResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uuas::UnGeoTagRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::uuas::UnGeoTagRequest, filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uuas::UnGeoTagResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::uuas::UnGeoTagResponse, result_),
  PROTOBUF_FIELD_OFFSET(::uuas::UnGeoTagResponse, telemetry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uuas::Telemetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::uuas::Telemetry, latitude_),
  PROTOBUF_FIELD_OFFSET(::uuas::Telemetry, longitude_),
  PROTOBUF_FIELD_OFFSET(::uuas::Telemetry, altitude_agl_m_),
  PROTOBUF_FIELD_OFFSET(::uuas::Telemetry, altitude_msl_m_),
  PROTOBUF_FIELD_OFFSET(::uuas::Telemetry, heading_deg_),
  PROTOBUF_FIELD_OFFSET(::uuas::Telemetry, velocityx_m_s_),
  PROTOBUF_FIELD_OFFSET(::uuas::Telemetry, velocityy_m_s_),
  PROTOBUF_FIELD_OFFSET(::uuas::Telemetry, velocityz_m_s_),
  PROTOBUF_FIELD_OFFSET(::uuas::Telemetry, roll_rad_),
  PROTOBUF_FIELD_OFFSET(::uuas::Telemetry, pitch_rad_),
  PROTOBUF_FIELD_OFFSET(::uuas::Telemetry, yaw_rad_),
  PROTOBUF_FIELD_OFFSET(::uuas::Telemetry, rollspeed_rad_s_),
  PROTOBUF_FIELD_OFFSET(::uuas::Telemetry, pitchspeed_rad_s_),
  PROTOBUF_FIELD_OFFSET(::uuas::Telemetry, yawspeed_rad_s_),
  PROTOBUF_FIELD_OFFSET(::uuas::Telemetry, timestamp_pixhawk_ms_),
  PROTOBUF_FIELD_OFFSET(::uuas::Telemetry, timestamp_msg_ms_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::uuas::GeoTagRequest)},
  { 7, -1, sizeof(::uuas::GeoTagResponse)},
  { 13, -1, sizeof(::uuas::UnGeoTagRequest)},
  { 19, -1, sizeof(::uuas::UnGeoTagResponse)},
  { 26, -1, sizeof(::uuas::Telemetry)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uuas::_GeoTagRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uuas::_GeoTagResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uuas::_UnGeoTagRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uuas::_UnGeoTagResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uuas::_Telemetry_default_instance_),
};

const char descriptor_table_protodef_uuaspb_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014uuaspb.proto\022\004uuas\"E\n\rGeoTagRequest\022\020\n"
  "\010filename\030\001 \001(\t\022\"\n\ttelemetry\030\002 \001(\0132\017.uua"
  "s.Telemetry\"4\n\016GeoTagResponse\022\"\n\006result\030"
  "\001 \001(\0162\022.uuas.ResultStatus\"#\n\017UnGeoTagReq"
  "uest\022\020\n\010filename\030\001 \001(\t\"Z\n\020UnGeoTagRespon"
  "se\022\"\n\006result\030\001 \001(\0162\022.uuas.ResultStatus\022\""
  "\n\ttelemetry\030\002 \001(\0132\017.uuas.Telemetry\"\363\002\n\tT"
  "elemetry\022\020\n\010latitude\030\001 \001(\001\022\021\n\tlongitude\030"
  "\002 \001(\001\022\026\n\016altitude_agl_m\030\003 \001(\001\022\026\n\016altitud"
  "e_msl_m\030\004 \001(\001\022\023\n\013heading_deg\030\005 \001(\001\022\025\n\rve"
  "locityx_m_s\030\006 \001(\001\022\025\n\rvelocityy_m_s\030\007 \001(\001"
  "\022\025\n\rvelocityz_m_s\030\010 \001(\001\022\020\n\010roll_rad\030\t \001("
  "\001\022\021\n\tpitch_rad\030\n \001(\001\022\017\n\007yaw_rad\030\013 \001(\001\022\027\n"
  "\017rollspeed_rad_s\030\014 \001(\001\022\030\n\020pitchspeed_rad"
  "_s\030\r \001(\001\022\026\n\016yawspeed_rad_s\030\016 \001(\001\022\034\n\024time"
  "stamp_pixhawk_ms\030\017 \001(\004\022\030\n\020timestamp_msg_"
  "ms\030\020 \001(\004*\037\n\014ResultStatus\022\006\n\002OK\020\000\022\007\n\003ERR\020"
  "\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_uuaspb_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_uuaspb_2eproto_sccs[5] = {
  &scc_info_GeoTagRequest_uuaspb_2eproto.base,
  &scc_info_GeoTagResponse_uuaspb_2eproto.base,
  &scc_info_Telemetry_uuaspb_2eproto.base,
  &scc_info_UnGeoTagRequest_uuaspb_2eproto.base,
  &scc_info_UnGeoTagResponse_uuaspb_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_uuaspb_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_uuaspb_2eproto = {
  false, false, descriptor_table_protodef_uuaspb_2eproto, "uuaspb.proto", 689,
  &descriptor_table_uuaspb_2eproto_once, descriptor_table_uuaspb_2eproto_sccs, descriptor_table_uuaspb_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_uuaspb_2eproto::offsets,
  file_level_metadata_uuaspb_2eproto, 5, file_level_enum_descriptors_uuaspb_2eproto, file_level_service_descriptors_uuaspb_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_uuaspb_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_uuaspb_2eproto)), true);
namespace uuas {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResultStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_uuaspb_2eproto);
  return file_level_enum_descriptors_uuaspb_2eproto[0];
}
bool ResultStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GeoTagRequest::InitAsDefaultInstance() {
  ::uuas::_GeoTagRequest_default_instance_._instance.get_mutable()->telemetry_ = const_cast< ::uuas::Telemetry*>(
      ::uuas::Telemetry::internal_default_instance());
}
class GeoTagRequest::_Internal {
 public:
  static const ::uuas::Telemetry& telemetry(const GeoTagRequest* msg);
};

const ::uuas::Telemetry&
GeoTagRequest::_Internal::telemetry(const GeoTagRequest* msg) {
  return *msg->telemetry_;
}
GeoTagRequest::GeoTagRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:uuas.GeoTagRequest)
}
GeoTagRequest::GeoTagRequest(const GeoTagRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filename(),
      GetArena());
  }
  if (from._internal_has_telemetry()) {
    telemetry_ = new ::uuas::Telemetry(*from.telemetry_);
  } else {
    telemetry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:uuas.GeoTagRequest)
}

void GeoTagRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoTagRequest_uuaspb_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  telemetry_ = nullptr;
}

GeoTagRequest::~GeoTagRequest() {
  // @@protoc_insertion_point(destructor:uuas.GeoTagRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeoTagRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete telemetry_;
}

void GeoTagRequest::ArenaDtor(void* object) {
  GeoTagRequest* _this = reinterpret_cast< GeoTagRequest* >(object);
  (void)_this;
}
void GeoTagRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeoTagRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoTagRequest& GeoTagRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoTagRequest_uuaspb_2eproto.base);
  return *internal_default_instance();
}


void GeoTagRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uuas.GeoTagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && telemetry_ != nullptr) {
    delete telemetry_;
  }
  telemetry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoTagRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "uuas.GeoTagRequest.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .uuas.Telemetry telemetry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoTagRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uuas.GeoTagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "uuas.GeoTagRequest.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // .uuas.Telemetry telemetry = 2;
  if (this->has_telemetry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::telemetry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uuas.GeoTagRequest)
  return target;
}

size_t GeoTagRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uuas.GeoTagRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // .uuas.Telemetry telemetry = 2;
  if (this->has_telemetry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoTagRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uuas.GeoTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoTagRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoTagRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uuas.GeoTagRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uuas.GeoTagRequest)
    MergeFrom(*source);
  }
}

void GeoTagRequest::MergeFrom(const GeoTagRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uuas.GeoTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
  if (from.has_telemetry()) {
    _internal_mutable_telemetry()->::uuas::Telemetry::MergeFrom(from._internal_telemetry());
  }
}

void GeoTagRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uuas.GeoTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoTagRequest::CopyFrom(const GeoTagRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uuas.GeoTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoTagRequest::IsInitialized() const {
  return true;
}

void GeoTagRequest::InternalSwap(GeoTagRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(telemetry_, other->telemetry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoTagRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoTagResponse::InitAsDefaultInstance() {
}
class GeoTagResponse::_Internal {
 public:
};

GeoTagResponse::GeoTagResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:uuas.GeoTagResponse)
}
GeoTagResponse::GeoTagResponse(const GeoTagResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:uuas.GeoTagResponse)
}

void GeoTagResponse::SharedCtor() {
  result_ = 0;
}

GeoTagResponse::~GeoTagResponse() {
  // @@protoc_insertion_point(destructor:uuas.GeoTagResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeoTagResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GeoTagResponse::ArenaDtor(void* object) {
  GeoTagResponse* _this = reinterpret_cast< GeoTagResponse* >(object);
  (void)_this;
}
void GeoTagResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeoTagResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoTagResponse& GeoTagResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoTagResponse_uuaspb_2eproto.base);
  return *internal_default_instance();
}


void GeoTagResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uuas.GeoTagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoTagResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .uuas.ResultStatus result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::uuas::ResultStatus>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoTagResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uuas.GeoTagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .uuas.ResultStatus result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uuas.GeoTagResponse)
  return target;
}

size_t GeoTagResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uuas.GeoTagResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .uuas.ResultStatus result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoTagResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uuas.GeoTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoTagResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoTagResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uuas.GeoTagResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uuas.GeoTagResponse)
    MergeFrom(*source);
  }
}

void GeoTagResponse::MergeFrom(const GeoTagResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uuas.GeoTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void GeoTagResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uuas.GeoTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoTagResponse::CopyFrom(const GeoTagResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uuas.GeoTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoTagResponse::IsInitialized() const {
  return true;
}

void GeoTagResponse::InternalSwap(GeoTagResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoTagResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnGeoTagRequest::InitAsDefaultInstance() {
}
class UnGeoTagRequest::_Internal {
 public:
};

UnGeoTagRequest::UnGeoTagRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:uuas.UnGeoTagRequest)
}
UnGeoTagRequest::UnGeoTagRequest(const UnGeoTagRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filename(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:uuas.UnGeoTagRequest)
}

void UnGeoTagRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnGeoTagRequest_uuaspb_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UnGeoTagRequest::~UnGeoTagRequest() {
  // @@protoc_insertion_point(destructor:uuas.UnGeoTagRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnGeoTagRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnGeoTagRequest::ArenaDtor(void* object) {
  UnGeoTagRequest* _this = reinterpret_cast< UnGeoTagRequest* >(object);
  (void)_this;
}
void UnGeoTagRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnGeoTagRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnGeoTagRequest& UnGeoTagRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnGeoTagRequest_uuaspb_2eproto.base);
  return *internal_default_instance();
}


void UnGeoTagRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uuas.UnGeoTagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnGeoTagRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "uuas.UnGeoTagRequest.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnGeoTagRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uuas.UnGeoTagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "uuas.UnGeoTagRequest.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uuas.UnGeoTagRequest)
  return target;
}

size_t UnGeoTagRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uuas.UnGeoTagRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnGeoTagRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uuas.UnGeoTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnGeoTagRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnGeoTagRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uuas.UnGeoTagRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uuas.UnGeoTagRequest)
    MergeFrom(*source);
  }
}

void UnGeoTagRequest::MergeFrom(const UnGeoTagRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uuas.UnGeoTagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
}

void UnGeoTagRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uuas.UnGeoTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnGeoTagRequest::CopyFrom(const UnGeoTagRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uuas.UnGeoTagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnGeoTagRequest::IsInitialized() const {
  return true;
}

void UnGeoTagRequest::InternalSwap(UnGeoTagRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UnGeoTagRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnGeoTagResponse::InitAsDefaultInstance() {
  ::uuas::_UnGeoTagResponse_default_instance_._instance.get_mutable()->telemetry_ = const_cast< ::uuas::Telemetry*>(
      ::uuas::Telemetry::internal_default_instance());
}
class UnGeoTagResponse::_Internal {
 public:
  static const ::uuas::Telemetry& telemetry(const UnGeoTagResponse* msg);
};

const ::uuas::Telemetry&
UnGeoTagResponse::_Internal::telemetry(const UnGeoTagResponse* msg) {
  return *msg->telemetry_;
}
UnGeoTagResponse::UnGeoTagResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:uuas.UnGeoTagResponse)
}
UnGeoTagResponse::UnGeoTagResponse(const UnGeoTagResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry()) {
    telemetry_ = new ::uuas::Telemetry(*from.telemetry_);
  } else {
    telemetry_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:uuas.UnGeoTagResponse)
}

void UnGeoTagResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnGeoTagResponse_uuaspb_2eproto.base);
  ::memset(&telemetry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&telemetry_)) + sizeof(result_));
}

UnGeoTagResponse::~UnGeoTagResponse() {
  // @@protoc_insertion_point(destructor:uuas.UnGeoTagResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnGeoTagResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete telemetry_;
}

void UnGeoTagResponse::ArenaDtor(void* object) {
  UnGeoTagResponse* _this = reinterpret_cast< UnGeoTagResponse* >(object);
  (void)_this;
}
void UnGeoTagResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnGeoTagResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnGeoTagResponse& UnGeoTagResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnGeoTagResponse_uuaspb_2eproto.base);
  return *internal_default_instance();
}


void UnGeoTagResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uuas.UnGeoTagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && telemetry_ != nullptr) {
    delete telemetry_;
  }
  telemetry_ = nullptr;
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnGeoTagResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .uuas.ResultStatus result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::uuas::ResultStatus>(val));
        } else goto handle_unusual;
        continue;
      // .uuas.Telemetry telemetry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnGeoTagResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uuas.UnGeoTagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .uuas.ResultStatus result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // .uuas.Telemetry telemetry = 2;
  if (this->has_telemetry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::telemetry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uuas.UnGeoTagResponse)
  return target;
}

size_t UnGeoTagResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uuas.UnGeoTagResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .uuas.Telemetry telemetry = 2;
  if (this->has_telemetry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_);
  }

  // .uuas.ResultStatus result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnGeoTagResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uuas.UnGeoTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UnGeoTagResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnGeoTagResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uuas.UnGeoTagResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uuas.UnGeoTagResponse)
    MergeFrom(*source);
  }
}

void UnGeoTagResponse::MergeFrom(const UnGeoTagResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uuas.UnGeoTagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry()) {
    _internal_mutable_telemetry()->::uuas::Telemetry::MergeFrom(from._internal_telemetry());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void UnGeoTagResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uuas.UnGeoTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnGeoTagResponse::CopyFrom(const UnGeoTagResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uuas.UnGeoTagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnGeoTagResponse::IsInitialized() const {
  return true;
}

void UnGeoTagResponse::InternalSwap(UnGeoTagResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnGeoTagResponse, result_)
      + sizeof(UnGeoTagResponse::result_)
      - PROTOBUF_FIELD_OFFSET(UnGeoTagResponse, telemetry_)>(
          reinterpret_cast<char*>(&telemetry_),
          reinterpret_cast<char*>(&other->telemetry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnGeoTagResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Telemetry::InitAsDefaultInstance() {
}
class Telemetry::_Internal {
 public:
};

Telemetry::Telemetry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:uuas.Telemetry)
}
Telemetry::Telemetry(const Telemetry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_msg_ms_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(timestamp_msg_ms_));
  // @@protoc_insertion_point(copy_constructor:uuas.Telemetry)
}

void Telemetry::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_msg_ms_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(timestamp_msg_ms_));
}

Telemetry::~Telemetry() {
  // @@protoc_insertion_point(destructor:uuas.Telemetry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Telemetry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Telemetry::ArenaDtor(void* object) {
  Telemetry* _this = reinterpret_cast< Telemetry* >(object);
  (void)_this;
}
void Telemetry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Telemetry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Telemetry& Telemetry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Telemetry_uuaspb_2eproto.base);
  return *internal_default_instance();
}


void Telemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:uuas.Telemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_msg_ms_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(timestamp_msg_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Telemetry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double altitude_agl_m = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          altitude_agl_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double altitude_msl_m = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          altitude_msl_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double heading_deg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          heading_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double velocityx_m_s = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          velocityx_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double velocityy_m_s = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          velocityy_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double velocityz_m_s = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          velocityz_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double roll_rad = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          roll_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pitch_rad = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          pitch_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double yaw_rad = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          yaw_rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rollspeed_rad_s = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          rollspeed_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pitchspeed_rad_s = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          pitchspeed_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double yawspeed_rad_s = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          yawspeed_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp_pixhawk_ms = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          timestamp_pixhawk_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp_msg_ms = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          timestamp_msg_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Telemetry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uuas.Telemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // double longitude = 2;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  // double altitude_agl_m = 3;
  if (!(this->altitude_agl_m() <= 0 && this->altitude_agl_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_altitude_agl_m(), target);
  }

  // double altitude_msl_m = 4;
  if (!(this->altitude_msl_m() <= 0 && this->altitude_msl_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_altitude_msl_m(), target);
  }

  // double heading_deg = 5;
  if (!(this->heading_deg() <= 0 && this->heading_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_heading_deg(), target);
  }

  // double velocityx_m_s = 6;
  if (!(this->velocityx_m_s() <= 0 && this->velocityx_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_velocityx_m_s(), target);
  }

  // double velocityy_m_s = 7;
  if (!(this->velocityy_m_s() <= 0 && this->velocityy_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_velocityy_m_s(), target);
  }

  // double velocityz_m_s = 8;
  if (!(this->velocityz_m_s() <= 0 && this->velocityz_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_velocityz_m_s(), target);
  }

  // double roll_rad = 9;
  if (!(this->roll_rad() <= 0 && this->roll_rad() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_roll_rad(), target);
  }

  // double pitch_rad = 10;
  if (!(this->pitch_rad() <= 0 && this->pitch_rad() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_pitch_rad(), target);
  }

  // double yaw_rad = 11;
  if (!(this->yaw_rad() <= 0 && this->yaw_rad() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_yaw_rad(), target);
  }

  // double rollspeed_rad_s = 12;
  if (!(this->rollspeed_rad_s() <= 0 && this->rollspeed_rad_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_rollspeed_rad_s(), target);
  }

  // double pitchspeed_rad_s = 13;
  if (!(this->pitchspeed_rad_s() <= 0 && this->pitchspeed_rad_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_pitchspeed_rad_s(), target);
  }

  // double yawspeed_rad_s = 14;
  if (!(this->yawspeed_rad_s() <= 0 && this->yawspeed_rad_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_yawspeed_rad_s(), target);
  }

  // uint64 timestamp_pixhawk_ms = 15;
  if (this->timestamp_pixhawk_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_timestamp_pixhawk_ms(), target);
  }

  // uint64 timestamp_msg_ms = 16;
  if (this->timestamp_msg_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_timestamp_msg_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uuas.Telemetry)
  return target;
}

size_t Telemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uuas.Telemetry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude = 1;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 2;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double altitude_agl_m = 3;
  if (!(this->altitude_agl_m() <= 0 && this->altitude_agl_m() >= 0)) {
    total_size += 1 + 8;
  }

  // double altitude_msl_m = 4;
  if (!(this->altitude_msl_m() <= 0 && this->altitude_msl_m() >= 0)) {
    total_size += 1 + 8;
  }

  // double heading_deg = 5;
  if (!(this->heading_deg() <= 0 && this->heading_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // double velocityx_m_s = 6;
  if (!(this->velocityx_m_s() <= 0 && this->velocityx_m_s() >= 0)) {
    total_size += 1 + 8;
  }

  // double velocityy_m_s = 7;
  if (!(this->velocityy_m_s() <= 0 && this->velocityy_m_s() >= 0)) {
    total_size += 1 + 8;
  }

  // double velocityz_m_s = 8;
  if (!(this->velocityz_m_s() <= 0 && this->velocityz_m_s() >= 0)) {
    total_size += 1 + 8;
  }

  // double roll_rad = 9;
  if (!(this->roll_rad() <= 0 && this->roll_rad() >= 0)) {
    total_size += 1 + 8;
  }

  // double pitch_rad = 10;
  if (!(this->pitch_rad() <= 0 && this->pitch_rad() >= 0)) {
    total_size += 1 + 8;
  }

  // double yaw_rad = 11;
  if (!(this->yaw_rad() <= 0 && this->yaw_rad() >= 0)) {
    total_size += 1 + 8;
  }

  // double rollspeed_rad_s = 12;
  if (!(this->rollspeed_rad_s() <= 0 && this->rollspeed_rad_s() >= 0)) {
    total_size += 1 + 8;
  }

  // double pitchspeed_rad_s = 13;
  if (!(this->pitchspeed_rad_s() <= 0 && this->pitchspeed_rad_s() >= 0)) {
    total_size += 1 + 8;
  }

  // double yawspeed_rad_s = 14;
  if (!(this->yawspeed_rad_s() <= 0 && this->yawspeed_rad_s() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 timestamp_pixhawk_ms = 15;
  if (this->timestamp_pixhawk_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp_pixhawk_ms());
  }

  // uint64 timestamp_msg_ms = 16;
  if (this->timestamp_msg_ms() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp_msg_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Telemetry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uuas.Telemetry)
  GOOGLE_DCHECK_NE(&from, this);
  const Telemetry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Telemetry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uuas.Telemetry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uuas.Telemetry)
    MergeFrom(*source);
  }
}

void Telemetry::MergeFrom(const Telemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uuas.Telemetry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.altitude_agl_m() <= 0 && from.altitude_agl_m() >= 0)) {
    _internal_set_altitude_agl_m(from._internal_altitude_agl_m());
  }
  if (!(from.altitude_msl_m() <= 0 && from.altitude_msl_m() >= 0)) {
    _internal_set_altitude_msl_m(from._internal_altitude_msl_m());
  }
  if (!(from.heading_deg() <= 0 && from.heading_deg() >= 0)) {
    _internal_set_heading_deg(from._internal_heading_deg());
  }
  if (!(from.velocityx_m_s() <= 0 && from.velocityx_m_s() >= 0)) {
    _internal_set_velocityx_m_s(from._internal_velocityx_m_s());
  }
  if (!(from.velocityy_m_s() <= 0 && from.velocityy_m_s() >= 0)) {
    _internal_set_velocityy_m_s(from._internal_velocityy_m_s());
  }
  if (!(from.velocityz_m_s() <= 0 && from.velocityz_m_s() >= 0)) {
    _internal_set_velocityz_m_s(from._internal_velocityz_m_s());
  }
  if (!(from.roll_rad() <= 0 && from.roll_rad() >= 0)) {
    _internal_set_roll_rad(from._internal_roll_rad());
  }
  if (!(from.pitch_rad() <= 0 && from.pitch_rad() >= 0)) {
    _internal_set_pitch_rad(from._internal_pitch_rad());
  }
  if (!(from.yaw_rad() <= 0 && from.yaw_rad() >= 0)) {
    _internal_set_yaw_rad(from._internal_yaw_rad());
  }
  if (!(from.rollspeed_rad_s() <= 0 && from.rollspeed_rad_s() >= 0)) {
    _internal_set_rollspeed_rad_s(from._internal_rollspeed_rad_s());
  }
  if (!(from.pitchspeed_rad_s() <= 0 && from.pitchspeed_rad_s() >= 0)) {
    _internal_set_pitchspeed_rad_s(from._internal_pitchspeed_rad_s());
  }
  if (!(from.yawspeed_rad_s() <= 0 && from.yawspeed_rad_s() >= 0)) {
    _internal_set_yawspeed_rad_s(from._internal_yawspeed_rad_s());
  }
  if (from.timestamp_pixhawk_ms() != 0) {
    _internal_set_timestamp_pixhawk_ms(from._internal_timestamp_pixhawk_ms());
  }
  if (from.timestamp_msg_ms() != 0) {
    _internal_set_timestamp_msg_ms(from._internal_timestamp_msg_ms());
  }
}

void Telemetry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uuas.Telemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Telemetry::CopyFrom(const Telemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uuas.Telemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Telemetry::IsInitialized() const {
  return true;
}

void Telemetry::InternalSwap(Telemetry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Telemetry, timestamp_msg_ms_)
      + sizeof(Telemetry::timestamp_msg_ms_)
      - PROTOBUF_FIELD_OFFSET(Telemetry, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Telemetry::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace uuas
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::uuas::GeoTagRequest* Arena::CreateMaybeMessage< ::uuas::GeoTagRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uuas::GeoTagRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::uuas::GeoTagResponse* Arena::CreateMaybeMessage< ::uuas::GeoTagResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uuas::GeoTagResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::uuas::UnGeoTagRequest* Arena::CreateMaybeMessage< ::uuas::UnGeoTagRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uuas::UnGeoTagRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::uuas::UnGeoTagResponse* Arena::CreateMaybeMessage< ::uuas::UnGeoTagResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uuas::UnGeoTagResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::uuas::Telemetry* Arena::CreateMaybeMessage< ::uuas::Telemetry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uuas::Telemetry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
